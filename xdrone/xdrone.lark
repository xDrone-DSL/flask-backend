//https://github.com/adamhosier/WACC-compiler/blob/master/antlr/WaccParser.g4

prog: func* "main" "(" ")" "{" commands "}"

commands: (command ";")*

?command: "takeoff" "(" ")"                                       -> takeoff
       | "land" "(" ")"                                           -> land
       | "up" "(" expr ")"                                        -> up
       | "down" "(" expr ")"                                      -> down
       | "left" "(" expr ")"                                      -> left
       | "right" "(" expr ")"                                     -> right
       | "forward" "(" expr ")"                                   -> forward
       | "backward" "(" expr ")"                                  -> backward
       | "rotate_left" "(" expr ")"                               -> rotatel
       | "rotate_right" "(" expr ")"                              -> rotater
       | "wait" "(" expr ")"                                      -> wait
       | type ident                                               -> declare
       | type ident "<-" expr                               -> declare_assign
       | vector_elem "<-" expr                              -> assign_vector_elem
       | list_elem "<-" expr                                -> assign_list_elem
       | ident "<-" expr                                    -> assign_ident
       | func_call
       | "repeat" expr "times" "{" commands "}"                   -> repeat
       | "if" expr "{" commands "}" ["else" "{" commands "}"]     -> if
       | "for" ident "from" expr "to" expr "{" commands "}"       -> for
       | "while" expr "{" commands "}"                            -> while

?func: "function" ident "(" [param_list] ")" "return" type "{" (func_command ";")* "}"  -> func_return
       | "function" ident "(" [param_list] ")" "{" commands "}"                  -> func_no_return

?func_command: command
       | "return" expr       -> return

param_list: type ident ("," type ident)*

func_call: ident "(" [arg_list] ")"
arg_list: expr ("," expr)*

ident: /\w/+

list_elem: expr "[" expr "]"

?vector_elem: expr "." "x"    -> vector_x
        | expr "." "y"        -> vector_y
        | expr "." "z"        -> vector_z


type: "int"                    -> int_type
        | "decimal"            -> decimal_type
        | "string"             -> string_type
        | "boolean"            -> boolean_type
        | "vector"             -> vector_type
        | "list" "[" type "]"  -> list_type

expr: SIGNED_INT                    -> int_expr
        | SIGNED_FLOAT              -> decimal_expr
        | ESCAPED_STRING            -> string_expr
        | "true"                    -> true_expr
        | "false"                   -> false_expr
        | ident
        | list_elem
        | vector_elem
        | "[" [expr ("," expr)*] "]"       -> list
        | "(" expr "," expr "," expr ")"   -> vector
        | func_call
        | "not" expr                -> not
        | "-" expr                  -> negative
        | "size" "(" expr ")"       -> size
        | expr "*" expr             -> multi
        | expr "/" expr             -> divide
        | expr "+" expr             -> plus
        | expr "-" expr             -> minus
        | expr ">" expr             -> greater
        | expr ">=" expr            -> greater_equal
        | expr "<" expr             -> less
        | expr "<=" expr            -> less_equal
        | expr "==" expr            -> equal
        | expr "=/=" expr           -> not_equal
        | expr "&" expr             -> concat
        | expr "and" expr           -> and
        | expr "or" expr            -> or
        | "(" expr ")"              -> parentheses


%import common.SIGNED_FLOAT
%import common.INT
%import common.ESCAPED_STRING
%import common.SIGNED_INT

%import common.WS
%ignore WS
